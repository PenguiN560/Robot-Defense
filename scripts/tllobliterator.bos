#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, flare, barrel, gun, sleeve, s2;
piece pistons, turret, tower,tige,radar,lights, door1,door2,door3;

static-var  OK, restore_delay;

// Signal definitions
#define SIG_AIM				2

#define SMOKEPIECE1 base

#include "StateChg.h"

activatescr()
{
	if( TRUE )
	{
		move door3 to x-axis [0] speed [2];
		sleep 300;
		move door2 to x-axis [0] speed [2];
		sleep 300;
		move door1 to x-axis [0] speed [2];
		sleep 814;
	}
	if( TRUE )
	{
		move tower to y-axis [0] speed [4];
		wait-for-move tower along y-axis;
		move tige to z-axis [0] speed [8];
		wait-for-move tige along z-axis;
		spin radar around y-axis speed <100.0>;
	}
	if( TRUE )
	{
		move turret to z-axis [-5] speed [4];
		turn pistons to x-axis <0> speed <30>;
		turn s2 to x-axis <0> speed <30>;
		move sleeve to z-axis [0] speed [4];
		sleep 2500;
	}
	if( TRUE )
	{
		move barrel to z-axis [0] speed [10];
		move gun to z-axis [0] speed [5];
		sleep 400;
	}
	sleep 169;
}

deactivatescr()
{
	if( TRUE )
	{
		move barrel to z-axis [-10] speed [10];
		move gun to z-axis [-3] speed [5];
		sleep 400;
	}
	if( TRUE )
	{
		stop-spin radar around y-axis;
		turn radar to y-axis <0> speed <150>;
		wait-for-turn radar around y-axis;
		move tige to z-axis [-4] speed [10];
		wait-for-move tige along z-axis;
		move tower to y-axis [-2.5] speed [4];
	}
	if( TRUE )
	{
		move turret to z-axis [0] speed [4];
		turn pistons to x-axis <-75> speed <30>;
		turn s2 to x-axis <75> speed <30>;
		move sleeve to z-axis [5] speed [4];
		sleep 2500;
	}
	
if( TRUE )
	{
		move door1 to x-axis [-3.4] speed [3];
		sleep 300;
		move door2 to x-axis [-3.4] speed [3];
		sleep 300;
		move door3 to x-axis [-3.4] speed [3];
		sleep 300;
	}
	sleep 160;
}
#include "SmokeUnit.h"

Go()
{
	dont-cache gun;
	dont-cache barrel;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache lights;
	dont-cache flare;
	dont-cache gun;
	dont-cache radar;
	dont-cache turret;
	dont-cache sleeve;
	dont-cache pistons;
	dont-cache s2;
	call-script activatescr();
	OK = 1;
}

Stop()
{
	OK = 0;
	call-script deactivatescr();
	cache sleeve;
	cache barrel;
	cache gun;
	cache door1;
	cache door2;
	cache door3;
	cache lights;
	cache flare;
	cache radar;
	cache turret;
	cache pistons;
}
#define ACTIVATECMD		call-script Go();
#define DEACTIVATECMD		call-script Stop();
#include "StateChg.h"

Create()
{
	dont-shade barrel;
	dont-shade gun;
	dont-shade sleeve;
	dont-shade s2;
	dont-shade tower;
	dont-shade tige;
	dont-shade radar;
	dont-shade turret;
	dont-shade pistons;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade lights;
	dont-cache flare;
	hide flare;

	OK = 1;
	move turret to z-axis [-5] now;
	call-script InitState();
	start-script SmokeUnit();
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
		{
			sleep 1000;
		}

	spin radar around y-axis speed <100.0>;

}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.0> speed <25>;
	turn sleeve to x-axis <0.0> speed <50>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !OK )
	{
		sleep 250;
	}
	sleep 2000;
	turn turret to y-axis heading speed <15>;
	turn sleeve to x-axis <0.0> - pitch speed <50>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

//TargetCleared(Func_Var_1)
//{
//	stop-spin turret around y-axis;
//	stop-spin gun around x-axis;
//}

FirePrimary()
{
	show flare;
	move barrel to z-axis [-4] speed [350];
	move gun to z-axis [-1.3] speed [150];
	sleep 210;
	move barrel to z-axis [0] speed [5];
	move gun to z-axis [0] speed [3];
	hide flare;
	wait-for-move barrel along z-axis; /*prevent aiming while the FX is still firing, because of the high burst*/
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode barrel type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode door3 type BITMAPONLY | BITMAP1;
		explode flare type BITMAPONLY | BITMAP5;
		explode gun type BITMAPONLY | BITMAP1;
		explode radar type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode barrel type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode flare type FALL | BITMAP5;
		explode gun type SHATTER | BITMAP1;
		explode radar type FALL | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode gun type BITMAPONLY | BITMAP1;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lights type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode gun type SHATTER | BITMAP5;
		explode body type SHATTER | BITMAP5;
		explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lights type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode radar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
}
