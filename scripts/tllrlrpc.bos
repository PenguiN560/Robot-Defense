
piece base ,socle, body, zap1, zap2, ring, boule, sleeve, flare,p1 ;

static-var i, canshoot,restore_delay ;

#DEFINE SMOKEPIECE1	socle
#DEFINE SIG_NUM1	2

#INCLUDE "smokeunit.h"
#INCLUDE "exptype.h"

zaps()
 { var t;
   while (get BUILD_PERCENT_LEFT)
    { sleep 500; }
   while (TRUE)
    { t=300+rand(50,1000);
      sleep t;
      show zap1;
      sleep 75;
      show zap2;
      sleep 100;
      hide zap1;
      sleep 50;
      hide zap2;
      sleep 100;
      show zap1;
      sleep 75;
      show zap2;
      sleep 100;
      hide zap1;
      sleep 50;
      hide zap2;
      sleep 100;
      }
  }

flotte()
 {
  while (get BUILD_PERCENT_LEFT)
    { sleep 500; }
  while (TRUE)
    {
     sleep 100;
     move boule to y-axis [0.5] speed [3];
     wait-for-move boule along y-axis;
     move boule to y-axis [1] speed [2];
     wait-for-move boule along y-axis;
     move boule to y-axis [-0.5] speed [3];
     wait-for-move boule along y-axis;
     move boule to y-axis [-1] speed [2];
     wait-for-move boule along y-axis;
    }
 }

tourne()
 {
  while (get BUILD_PERCENT_LEFT)
    { sleep 500; }
  while (TRUE)
    {
     sleep 100;
     turn p1 to z-axis <15> speed <20>;
     wait-for-turn p1 around z-axis;
     turn p1 to z-axis <20> speed <10>;
     wait-for-turn p1 around z-axis;
     turn p1 to z-axis <25> speed <5>;
     wait-for-turn p1 around z-axis;
     turn p1 to z-axis <-15> speed <20>;
     wait-for-turn p1 around z-axis;
     turn p1 to z-axis <-20> speed <10>;
     wait-for-turn p1 around z-axis;
     turn p1 to z-axis <-25> speed <5>;
     wait-for-turn p1 around z-axis;
    }
 }



Create()
	{
		HIDE flare;
		HIDE zap1;
		HIDE zap2;
		DONT-cache flare;
		DONT-cache boule;
		DONT-cache ring;
		DONT-cache body;
		DONT-cache zap1;
		DONT-cache zap2;
		DONT-cache p1;

		i=0;
		canshoot=TRUE;
		restore_delay = 3000;
	
		START-SCRIPT SmokeUnit();
		START-SCRIPT Zaps();
		START-SCRIPT flotte();
		START-SCRIPT tourne();


		while( get BUILD_PERCENT_LEFT )
		{
			sleep 1000;
		}
		
		spin boule around y-axis speed <80>;
		spin body around y-axis speed <10>;
		spin ring around z-axis speed <20>;
		spin flare around z-axis speed <500>;

		spin zap1 around x-axis speed <250>;
		spin zap2 around x-axis speed <150>;

	}

SetMaxReloadTime(time)
	{
		restore_delay = time * 2 ;
	}

RestoreAfterDelay()
	{
		SLEEP restore_delay;
	}

AimPrimary(heading,pitch)
	{
		SIGNAL SIG_NUM1;
		SET-SIGNAL-MASK SIG_NUM1;
		
		TURN sleeve to y-axis heading SPEED <100>;
		TURN sleeve to x-axis (0 - pitch) SPEED <150>;


		WAIT-FOR-TURN sleeve around y-axis;
		WAIT-FOR-TURN sleeve around x-axis;
		
		WHILE (!canshoot)
			{
			sleep 500;
			}

		START-SCRIPT RestoreAfterDelay();

		RETURN ( TRUE );
	}
FirePrimary()
	{
		SHOW flare;
		SHOW zap1;
		SLEEP 20;
		Show zap2;
		Sleep 25;
		Hide zap1;
		Sleep 25;
		hide flare;
		Hide zap2;
		SHOW zap1;
		SLEEP 20;
		Show zap2;
		Sleep 25;
		show flare;
		Hide zap1;
		Sleep 25;
		Hide zap2;
		SHOW zap1;
		SLEEP 20;
		Show zap2;
		Sleep 25;
		Hide zap1;
		hide flare;
		Sleep 25;
		Hide zap2;		
	}

QueryPrimary(piecenum)
	{
		piecenum = flare;
	}
AimFromPrimary(piecenum)
	{
		piecenum = sleeve;
	}
SweetSpot(piecenum)
	{
		piecenum = base;
	}
Killed(severity,corpsetype)
	{
		IF (severity <= 25 )
			{
			corpsetype = 1 ;
			EXPLODE  socle type  	BITMAPONLY | BITMAP1;
			EXPLODE  body type  	BITMAPONLY | BITMAP3;
			EXPLODE  boule type  	BITMAPONLY | BITMAP5;
			EXPLODE  p1 type  		BITMAPONLY | BITMAP1;
			RETURN ( 0 );
			}
		IF (severity <= 50 )
			{
			corpsetype = 2 ;
			EXPLODE  socle type  		FALL | BITMAP1;
			EXPLODE  boule type  		SHATTER | BITMAP3;
			EXPLODE  ring type	  		SHATTER | BITMAP4;
			EXPLODE  zap1 type  		FALL | BITMAP5;
			EXPLODE  zap2 type  		FALL | BITMAP5;
			RETURN ( 0 );
			}
		IF (severity <= 99 )
			{
			corpsetype = 3 ;
			EXPLODE  socle type	 	 	SHATTER | BITMAP2;
			EXPLODE  boule type	  		SHATTER | BITMAP3;
			EXPLODE  ring type 	 		SHATTER | BITMAP4;
			EXPLODE  zap1 type  		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
			EXPLODE  p1 type  		FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
			RETURN ( 0 );
			}
		corpsetype = 3 ;
		EXPLODE  socle type  	SHATTER | BITMAP5;
		EXPLODE  boule type  	SHATTER | BITMAP3;
		EXPLODE  ring type  	SHATTER | EXPLODE_ON_HIT | BITMAP4;
		EXPLODE  zap1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		EXPLODE  p1 type  	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	}
