#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret1a, turret2b, turret3c, barrel1a, barrel2b, barrel3c,
       pivot, flare1a, flare2b, flare3c, apt, bpt, cpt;

static-var  gun_1, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret3c;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Built by PDG - Phoenix Design Group copyright @1999 3rd Party TA Editors for news go to: http://www.z-ta.com               
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	hide pivot;
	hide flare1a;
	hide flare2b;
	hide flare3c;
	hide apt;
	hide bpt;
	hide cpt;
	gun_1 = body;
	restore_delay = 2500;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1a to y-axis <0.000000> speed <150.000000>;
	turn turret2b to y-axis <0.000000> speed <150.000000>;
	turn turret3c to y-axis <0.000000> speed <90.000000>;
	turn pivot to x-axis <0.000000> speed <50.000000>;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1a to y-axis heading speed <90.000000>;
	turn turret2b to y-axis heading speed <90.000000>;
	wait-for-turn turret2b around y-axis;
	wait-for-turn turret1a around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret3c to y-axis heading speed <90.000000>;
	turn pivot to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret3c around y-axis;
	wait-for-turn barrel3c around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_1 == 1 )
	{
		move barrel1a to z-axis [-0.800000] speed [300.000000];
		wait-for-move barrel1a along z-axis;
		move barrel1a to z-axis [0.000000] speed [300.000000];
		show flare1a;
		sleep 150;
		hide flare1a;
	}
	if( gun_1 == 2 )
	{
		move barrel2b to z-axis [-0.800000] speed [300.000000];
		wait-for-move barrel2b along z-axis;
		move barrel2b to z-axis [0.000000] speed [300.000000];
		show flare2b;
		sleep 100;
		hide flare2b;
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = body;
	}
}

FirePrimary()
{
	move barrel3c to z-axis [-1.200000] speed [460.000000];
	wait-for-move barrel3c along z-axis;
	move barrel3c to z-axis [0.000000] speed [3.000000];
	show flare3c;
	sleep 150;
	hide flare3c;
}

AimFromSecondary(piecenum)
{
	piecenum = turret3c;
}

AimFromPrimary(piecenum)
{
	piecenum = turret3c;
}

QuerySecondary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = apt;
	}
	if( gun_1 == 2 )
	{
		piecenum = bpt;
	}
}

QueryPrimary(piecenum)
{
	piecenum = cpt;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide pivot;
	hide flare1a;
	hide flare2b;
	hide flare3c;
	hide apt;
	hide bpt;
	hide cpt;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type BITMAPONLY | BITMAP1;
		explode barrel2b type BITMAPONLY | BITMAP2;
		explode barrel3c type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		explode turret1a type BITMAPONLY | BITMAP2;
		explode turret2b type BITMAPONLY | BITMAP2;
		explode turret3c type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1a type FALL | BITMAP1;
		explode barrel2b type FALL | BITMAP2;
		explode barrel3c type FALL | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		explode turret1a type SHATTER | BITMAP2;
		explode turret2b type SHATTER | BITMAP2;
		explode turret3c type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		explode turret1a type SHATTER | BITMAP2;
		explode turret2b type SHATTER | BITMAP2;
		explode turret3c type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3c type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type BITMAPONLY | BITMAP3;
	explode turret1a type SHATTER | BITMAP2;
	explode turret2b type SHATTER | BITMAP2;
	explode turret3c type SHATTER | BITMAP2;
}
